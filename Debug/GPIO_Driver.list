
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800068c  08000694  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800068c  0800068c  00010694  2**0
                  CONTENTS
  4 .ARM          00000000  0800068c  0800068c  00010694  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800068c  08000694  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000694  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000694  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010694  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000106c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012a5  00000000  00000000  00010707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000595  00000000  00000000  000119ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00011f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d0  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e148  00000000  00000000  00012140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017d1  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00050f4f  00000000  00000000  00021a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000003cc  00000000  00000000  000729a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00072d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000674 	.word	0x08000674

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000674 	.word	0x08000674

080001d4 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4608      	mov	r0, r1
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	4603      	mov	r3, r0
 80001e4:	70fb      	strb	r3, [r7, #3]
 80001e6:	460b      	mov	r3, r1
 80001e8:	70bb      	strb	r3, [r7, #2]
 80001ea:	4613      	mov	r3, r2
 80001ec:	707b      	strb	r3, [r7, #1]
	GPIO_Config->GPIO_Pin = Pin;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	78fa      	ldrb	r2, [r7, #3]
 80001f2:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_MODE = Mode;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	78ba      	ldrb	r2, [r7, #2]
 80001f8:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	787a      	ldrb	r2, [r7, #1]
 80001fe:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	7c3a      	ldrb	r2, [r7, #16]
 8000204:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	7d3a      	ldrb	r2, [r7, #20]
 800020a:	711a      	strb	r2, [r3, #4]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8000224:	78fb      	ldrb	r3, [r7, #3]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d135      	bne.n	8000296 <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a36      	ldr	r2, [pc, #216]	; (8000308 <GPIO_PeriphClck+0xf0>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d104      	bne.n	800023c <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	2001      	movs	r0, #1
 8000236:	f000 f979 	bl	800052c <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 800023a:	e061      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a33      	ldr	r2, [pc, #204]	; (800030c <GPIO_PeriphClck+0xf4>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d104      	bne.n	800024e <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000244:	2101      	movs	r1, #1
 8000246:	2002      	movs	r0, #2
 8000248:	f000 f970 	bl	800052c <RCC_AHB1Cmd>
}
 800024c:	e058      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4a2f      	ldr	r2, [pc, #188]	; (8000310 <GPIO_PeriphClck+0xf8>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d104      	bne.n	8000260 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	2004      	movs	r0, #4
 800025a:	f000 f967 	bl	800052c <RCC_AHB1Cmd>
}
 800025e:	e04f      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a2c      	ldr	r2, [pc, #176]	; (8000314 <GPIO_PeriphClck+0xfc>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d104      	bne.n	8000272 <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 8000268:	2101      	movs	r1, #1
 800026a:	2008      	movs	r0, #8
 800026c:	f000 f95e 	bl	800052c <RCC_AHB1Cmd>
}
 8000270:	e046      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a28      	ldr	r2, [pc, #160]	; (8000318 <GPIO_PeriphClck+0x100>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d104      	bne.n	8000284 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 800027a:	2101      	movs	r1, #1
 800027c:	2010      	movs	r0, #16
 800027e:	f000 f955 	bl	800052c <RCC_AHB1Cmd>
}
 8000282:	e03d      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a25      	ldr	r2, [pc, #148]	; (800031c <GPIO_PeriphClck+0x104>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d139      	bne.n	8000300 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 800028c:	2101      	movs	r1, #1
 800028e:	2080      	movs	r0, #128	; 0x80
 8000290:	f000 f94c 	bl	800052c <RCC_AHB1Cmd>
}
 8000294:	e034      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <GPIO_PeriphClck+0xf0>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d104      	bne.n	80002a8 <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 800029e:	2100      	movs	r1, #0
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f943 	bl	800052c <RCC_AHB1Cmd>
}
 80002a6:	e02b      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <GPIO_PeriphClck+0xf4>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d104      	bne.n	80002ba <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 80002b0:	2100      	movs	r1, #0
 80002b2:	2002      	movs	r0, #2
 80002b4:	f000 f93a 	bl	800052c <RCC_AHB1Cmd>
}
 80002b8:	e022      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a14      	ldr	r2, [pc, #80]	; (8000310 <GPIO_PeriphClck+0xf8>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d104      	bne.n	80002cc <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 80002c2:	2100      	movs	r1, #0
 80002c4:	2004      	movs	r0, #4
 80002c6:	f000 f931 	bl	800052c <RCC_AHB1Cmd>
}
 80002ca:	e019      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <GPIO_PeriphClck+0xfc>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d104      	bne.n	80002de <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 80002d4:	2100      	movs	r1, #0
 80002d6:	2008      	movs	r0, #8
 80002d8:	f000 f928 	bl	800052c <RCC_AHB1Cmd>
}
 80002dc:	e010      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <GPIO_PeriphClck+0x100>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d104      	bne.n	80002f0 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2010      	movs	r0, #16
 80002ea:	f000 f91f 	bl	800052c <RCC_AHB1Cmd>
}
 80002ee:	e007      	b.n	8000300 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <GPIO_PeriphClck+0x104>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d103      	bne.n	8000300 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2080      	movs	r0, #128	; 0x80
 80002fc:	f000 f916 	bl	800052c <RCC_AHB1Cmd>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40020000 	.word	0x40020000
 800030c:	40020400 	.word	0x40020400
 8000310:	40020800 	.word	0x40020800
 8000314:	40020c00 	.word	0x40020c00
 8000318:	40021000 	.word	0x40021000
 800031c:	40021c00 	.word	0x40021c00

08000320 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_Config_t *GPIO_Config)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIOx, ENABLE);
 8000330:	2101      	movs	r1, #1
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f7ff ff70 	bl	8000218 <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b10      	cmp	r3, #16
 800033e:	d176      	bne.n	800042e <GPIO_Init+0x10e>
	{
		if(GPIOx == GPIOA)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a6a      	ldr	r2, [pc, #424]	; (80004ec <GPIO_Init+0x1cc>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d10e      	bne.n	8000366 <GPIO_Init+0x46>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIOx->LCKR = LCKR_1_Pin13_Pin14;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 800034e:	61da      	str	r2, [r3, #28]
			GPIOx->LCKR = LCKR_0_Pin13_Pin14;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000356:	61da      	str	r2, [r3, #28]
			GPIOx->LCKR = LCKR_1_Pin13_Pin14;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 800035e:	61da      	str	r2, [r3, #28]
			temp_variable = GPIOx->LCKR;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 8000366:	2300      	movs	r3, #0
 8000368:	73fb      	strb	r3, [r7, #15]
 800036a:	e05c      	b.n	8000426 <GPIO_Init+0x106>
		{
			GPIOx->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	7bfa      	ldrb	r2, [r7, #15]
 8000372:	0052      	lsls	r2, r2, #1
 8000374:	2103      	movs	r1, #3
 8000376:	fa01 f202 	lsl.w	r2, r1, r2
 800037a:	43d2      	mvns	r2, r2
 800037c:	401a      	ands	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
			GPIOx->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	7852      	ldrb	r2, [r2, #1]
 800038a:	4611      	mov	r1, r2
 800038c:	7bfa      	ldrb	r2, [r7, #15]
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]

			GPIOx->OTYPER &= ~(GPIO_OType_Reset << pin);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	7bfa      	ldrb	r2, [r7, #15]
 80003a0:	2101      	movs	r1, #1
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	43d2      	mvns	r2, r2
 80003a8:	401a      	ands	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	605a      	str	r2, [r3, #4]
			GPIOx->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	7892      	ldrb	r2, [r2, #2]
 80003b6:	4611      	mov	r1, r2
 80003b8:	7bfa      	ldrb	r2, [r7, #15]
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	605a      	str	r2, [r3, #4]

			GPIOx->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	7bfa      	ldrb	r2, [r7, #15]
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	43d2      	mvns	r2, r2
 80003d4:	401a      	ands	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	78d2      	ldrb	r2, [r2, #3]
 80003e2:	4611      	mov	r1, r2
 80003e4:	7bfa      	ldrb	r2, [r7, #15]
 80003e6:	0052      	lsls	r2, r2, #1
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	431a      	orrs	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	609a      	str	r2, [r3, #8]

			GPIOx->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	0052      	lsls	r2, r2, #1
 80003fa:	2103      	movs	r1, #3
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	43d2      	mvns	r2, r2
 8000402:	401a      	ands	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	60da      	str	r2, [r3, #12]
			GPIOx->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	7912      	ldrb	r2, [r2, #4]
 8000410:	4611      	mov	r1, r2
 8000412:	7bfa      	ldrb	r2, [r7, #15]
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	431a      	orrs	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	3301      	adds	r3, #1
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	2b0f      	cmp	r3, #15
 800042a:	d99f      	bls.n	800036c <GPIO_Init+0x4c>

		GPIOx->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
		GPIOx->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
	}

}
 800042c:	e059      	b.n	80004e2 <GPIO_Init+0x1c2>
		GPIOx->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	0052      	lsls	r2, r2, #1
 8000436:	2103      	movs	r1, #3
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	601a      	str	r2, [r3, #0]
		GPIOx->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	683a      	ldr	r2, [r7, #0]
 800044a:	7852      	ldrb	r2, [r2, #1]
 800044c:	4611      	mov	r1, r2
 800044e:	7bfa      	ldrb	r2, [r7, #15]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	431a      	orrs	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	601a      	str	r2, [r3, #0]
		GPIOx->OTYPER &= ~(GPIO_OType_Reset << pin);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	7bfa      	ldrb	r2, [r7, #15]
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	43d2      	mvns	r2, r2
 800046a:	401a      	ands	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	605a      	str	r2, [r3, #4]
		GPIOx->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	683a      	ldr	r2, [r7, #0]
 8000476:	7892      	ldrb	r2, [r2, #2]
 8000478:	4611      	mov	r1, r2
 800047a:	7bfa      	ldrb	r2, [r7, #15]
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	431a      	orrs	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	605a      	str	r2, [r3, #4]
		GPIOx->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	7bfa      	ldrb	r2, [r7, #15]
 800048c:	0052      	lsls	r2, r2, #1
 800048e:	2101      	movs	r1, #1
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	43d2      	mvns	r2, r2
 8000496:	401a      	ands	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	609a      	str	r2, [r3, #8]
		GPIOx->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	78d2      	ldrb	r2, [r2, #3]
 80004a4:	4611      	mov	r1, r2
 80004a6:	7bfa      	ldrb	r2, [r7, #15]
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	431a      	orrs	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	609a      	str	r2, [r3, #8]
		GPIOx->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	7bfa      	ldrb	r2, [r7, #15]
 80004ba:	0052      	lsls	r2, r2, #1
 80004bc:	2103      	movs	r1, #3
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	401a      	ands	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	60da      	str	r2, [r3, #12]
		GPIOx->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	7912      	ldrb	r2, [r2, #4]
 80004d2:	4611      	mov	r1, r2
 80004d4:	7bfa      	ldrb	r2, [r7, #15]
 80004d6:	0052      	lsls	r2, r2, #1
 80004d8:	fa01 f202 	lsl.w	r2, r1, r2
 80004dc:	431a      	orrs	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60da      	str	r2, [r3, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000

080004f0 <GPIO_WritePort>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	word: 16-bit data that is to be written to the ODR.
 */
void GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t word)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = word;
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	615a      	str	r2, [r3, #20]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <GPIO_ReadPort>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @retval	Returns a 16 bit value from IDR
 */
uint16_t GPIO_ReadPort(GPIO_TypeDef *GPIOx)
{
 800050e:	b480      	push	{r7}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	uint16_t value;

	value = (uint16_t)(GPIOx->IDR);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	81fb      	strh	r3, [r7, #14]

	return value;
 800051c:	89fb      	ldrh	r3, [r7, #14]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d106      	bne.n	800054c <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <RCC_AHB1Cmd+0x3c>)
 8000540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000542:	4909      	ldr	r1, [pc, #36]	; (8000568 <RCC_AHB1Cmd+0x3c>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 800054a:	e006      	b.n	800055a <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <RCC_AHB1Cmd+0x3c>)
 800054e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	43db      	mvns	r3, r3
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <RCC_AHB1Cmd+0x3c>)
 8000556:	4013      	ands	r3, r2
 8000558:	630b      	str	r3, [r1, #48]	; 0x30
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <main>:
 */

uint16_t portc;

int main()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
	//Initializing all pins in port C as input
	GPIO_Config_t PortC;
	GPIO_Config(&PortC, AllPins, GPIO_Input, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullDown);
 8000572:	f107 0008 	add.w	r0, r7, #8
 8000576:	2302      	movs	r3, #2
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2300      	movs	r3, #0
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	f7ff fe26 	bl	80001d4 <GPIO_Config>
	GPIO_Init(GPIOC, &PortC);
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4619      	mov	r1, r3
 800058e:	480f      	ldr	r0, [pc, #60]	; (80005cc <main+0x60>)
 8000590:	f7ff fec6 	bl	8000320 <GPIO_Init>

	//Initializing all pins in port A as output
	GPIO_Config_t PortA;
	GPIO_Config(&PortA, AllPins, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000594:	4638      	mov	r0, r7
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2300      	movs	r3, #0
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	f7ff fe16 	bl	80001d4 <GPIO_Config>
	GPIO_Init(GPIOA, &PortA);
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4808      	ldr	r0, [pc, #32]	; (80005d0 <main+0x64>)
 80005ae:	f7ff feb7 	bl	8000320 <GPIO_Init>


	while (1)
	{
		//Reading from port C
		portc = GPIO_ReadPort(GPIOC);
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <main+0x60>)
 80005b4:	f7ff ffab 	bl	800050e <GPIO_ReadPort>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <main+0x68>)
 80005be:	801a      	strh	r2, [r3, #0]

		//Writing a value to Port A
		GPIO_WritePort(GPIOA, 0xffff);
 80005c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <main+0x64>)
 80005c6:	f7ff ff93 	bl	80004f0 <GPIO_WritePort>
		portc = GPIO_ReadPort(GPIOC);
 80005ca:	e7f2      	b.n	80005b2 <main+0x46>
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	2000001c 	.word	0x2000001c

080005d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000606:	f000 f811 	bl	800062c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff ffaf 	bl	800056c <main>

0800060e <LoopForever>:

LoopForever:
  b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   r0, =_estack
 8000610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800061c:	08000694 	.word	0x08000694
  ldr r2, =_sbss
 8000620:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000624:	20000020 	.word	0x20000020

08000628 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC_IRQHandler>
	...

0800062c <__libc_init_array>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4d0d      	ldr	r5, [pc, #52]	; (8000664 <__libc_init_array+0x38>)
 8000630:	4c0d      	ldr	r4, [pc, #52]	; (8000668 <__libc_init_array+0x3c>)
 8000632:	1b64      	subs	r4, r4, r5
 8000634:	10a4      	asrs	r4, r4, #2
 8000636:	2600      	movs	r6, #0
 8000638:	42a6      	cmp	r6, r4
 800063a:	d109      	bne.n	8000650 <__libc_init_array+0x24>
 800063c:	4d0b      	ldr	r5, [pc, #44]	; (800066c <__libc_init_array+0x40>)
 800063e:	4c0c      	ldr	r4, [pc, #48]	; (8000670 <__libc_init_array+0x44>)
 8000640:	f000 f818 	bl	8000674 <_init>
 8000644:	1b64      	subs	r4, r4, r5
 8000646:	10a4      	asrs	r4, r4, #2
 8000648:	2600      	movs	r6, #0
 800064a:	42a6      	cmp	r6, r4
 800064c:	d105      	bne.n	800065a <__libc_init_array+0x2e>
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f855 3b04 	ldr.w	r3, [r5], #4
 8000654:	4798      	blx	r3
 8000656:	3601      	adds	r6, #1
 8000658:	e7ee      	b.n	8000638 <__libc_init_array+0xc>
 800065a:	f855 3b04 	ldr.w	r3, [r5], #4
 800065e:	4798      	blx	r3
 8000660:	3601      	adds	r6, #1
 8000662:	e7f2      	b.n	800064a <__libc_init_array+0x1e>
 8000664:	0800068c 	.word	0x0800068c
 8000668:	0800068c 	.word	0x0800068c
 800066c:	0800068c 	.word	0x0800068c
 8000670:	08000690 	.word	0x08000690

08000674 <_init>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr

08000680 <_fini>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr
